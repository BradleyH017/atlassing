configfile: "config.yaml"
rule all:
    input:
        #expand("results/{tissue}/tables/keras-grid_search/keras-use_params.txt", tissue=config["tissue"])
        expand("results/{tissue}/tables/annotation/CellTypist/CellTypist_anno_conf.csv", tissue=config["tissue"]), expand("results/{tissue}/objects/adata_raw_predicted_celltypes_filtered.h5ad", tissue=config["tissue"])


# Define memory increment function
def increment_memory(base_memory):
    def mem(wildcards, attempt):
        return base_memory * (2 ** (attempt - 1))
    return mem

rule qc_raw:
    input:
        "/lustre/scratch126/humgen/projects/sc-eqtl-ibd/analysis/bradley_analysis/scripts/scRNAseq/Atlassing/tissues_combined/input_test/adata_raw_input_{tissue}.h5ad"
    output:
        "results/{tissue}/objects/adata_PCAd.h5ad",
        "results/{tissue}/tables/knee.txt",
        "results/{tissue}/tables/log1p_cp10k_sparse.npz",
        "results/{tissue}/tables/genes.txt",
        "results/{tissue}/tables/cells.txt",
        "results/{tissue}/tables/raw_counts_sparse.npz",
        "results/{tissue}/tables/raw_cells.txt",
        "results/{tissue}/tables/raw_genes.txt",
        "results/{tissue}/tables/raw_gene.var.txt"
    params:
        discard_other_inflams=config["discard_other_inflams"], 
        all_blood_immune=config["all_blood_immune"],
        min_nUMI=config["min_nUMI"],
        use_absolute_nUMI=config["use_absolute_nUMI"],
        use_relative_mad=config["use_relative_mad"],
        lineage_column=config["lineage_column"],
        relative_grouping=config["relative_grouping"],
        relative_nMAD_threshold=config["relative_nMAD_threshold"],
        filter_nMad_sequentially=config["filter_nMad_sequentially"],
        nMad_directionality=config["nMad_directionality"],
        relative_nUMI_log=config["relative_nUMI_log"],
        min_nGene=config["min_nGene"],
        use_absolute_nGene=config["use_absolute_nGene"],
        relative_nGene_log=config["relative_nGene_log"],
        MT_thresh_gut=config["MT_thresh_gut"],
        MT_thresh_blood=config["MT_thresh_blood"],
        use_absolute_MT=config["use_absolute_MT"],
        absolute_max_MT=config["absolute_max_MT"],
        use_MT_thresh_blood_gut_immune=config["use_MT_thresh_blood_gut_immune"],
        min_mean_nCount_per_samp_blood=config["min_mean_nCount_per_samp_blood"],
        min_mean_nCount_per_samp_gut=config["min_mean_nCount_per_samp_gut"],
        min_mean_nGene_per_samp_blood=config["min_mean_nGene_per_samp_blood"],
        min_mean_nGene_per_samp_gut=config["min_mean_nGene_per_samp_gut"],
        use_abs_per_samp=config["use_abs_per_samp"],
        filt_blood_keras=config["filt_blood_keras"],
        n_variable_genes=config["n_variable_genes"],
        remove_problem_genes=config["remove_problem_genes"]
    resources:
        mem=20000,
        queue='normal',
        mem_mb=20000,
        mem_mib=20000,
        disk_mb=20000,
        tmpdir="tmp",
        threads=1
    conda:
        "scvi-env"
    shell:
        r"""
        python  bin/001-raw_QC_sm.py \
        --input_file {input} \
        --tissue {wildcards.tissue} \
        --discard_other_inflams {params.discard_other_inflams} \
        --all_blood_immune {params.all_blood_immune} \
        --min_nUMI {params.min_nUMI} \
        --use_absolute_nUMI {params.use_absolute_nUMI} \
        --use_relative_mad {params.use_relative_mad} \
        --filter_nMad_sequentially {params.filter_nMad_sequentially} \
        --nMad_directionality {params.nMad_directionality} \
        --lineage_column {params.lineage_column} \
        --relative_grouping {params.relative_grouping} --relative_nMAD_threshold {params.relative_nMAD_threshold} \
        --relative_nUMI_log {params.relative_nUMI_log} \
        --min_nGene {params.min_nGene} \
        --use_absolute_nGene {params.use_absolute_nGene} \
        --relative_nGene_log {params.relative_nGene_log} \
        --MT_thresh_gut {params.MT_thresh_gut} \
        --MT_thresh_blood {params.MT_thresh_blood} \
        --use_absolute_MT {params.use_absolute_MT} \
        --absolute_max_MT {params.absolute_max_MT} \
        --use_MT_thresh_blood_gut_immune {params.use_MT_thresh_blood_gut_immune} \
        --min_mean_nCount_per_samp_blood {params.min_mean_nCount_per_samp_blood} \
        --min_mean_nCount_per_samp_gut {params.min_mean_nCount_per_samp_gut} \
        --min_mean_nGene_per_samp_blood {params.min_mean_nGene_per_samp_blood} \
        --min_mean_nGene_per_samp_gut {params.min_mean_nGene_per_samp_gut} \
        --use_abs_per_samp {params.use_abs_per_samp} \
        --filt_blood_keras {params.filt_blood_keras} \
        --n_variable_genes {params.n_variable_genes} \
        --remove_problem_genes {params.remove_problem_genes}
        """
  
rule batch_correct:
    input:
        "results/{tissue}/objects/adata_PCAd.h5ad"
    output:
        "results/{tissue}/objects/adata_PCAd_batched.h5ad"
    params:
        batch_correction=config["batch_correction"],
        benchmark_batch_correction=config["benchmark_batch_correction"]
    conda:
        "scvi-env"
    resources:
        mem=20000,
        queue='normal',
        mem_mb=20000,
        mem_mib=20000,
        disk_mb=20000,
        tmpdir="tmp",
        threads=1
    shell:
        r"""
        python bin/001b-batch_correction.py \
            --tissue {wildcards.tissue} \
            --input_file {input[0]} \
            --batch_correction {params.batch_correction} \
            --benchmark_batch_correction {params.benchmark_batch_correction}

        """

if config["use_bbknn"]:
    rule get_nn:
        input:
            "results/{tissue}/objects/adata_PCAd.h5ad",
            "results/{tissue}/tables/knee.txt"
        output:
            "results/{tissue}/tables/optimum_nn.txt"
        params:
            use_matrix="X_pca"
        resources:
            mem=increment_memory(20000),
            queue='normal',
            mem_mb=increment_memory(20000),
            mem_mib=increment_memory(20000),
            disk_mb=increment_memory(20000),
            tmpdir="tmp",
            threads=16
        conda:
            "bbknn"
        shell:
            r"""
            python bin/002-bbknn.py \
                --tissue {wildcards.tissue} \
                --fpath {input[0]} \
                --knee_file {input[1]} \
                --use_matrix {params.use_matrix}
            """
else:
    rule make_dummy_nn_from_user:
        output:
            "results/{tissue}/tables/optimum_nn.txt"
        params:
            nn=config["nn"]
        resources:
            mem=5000,
            queue='normal',
            mem_mb=5000,
            mem_mib=5000,
            disk_mb=5000,
            tmpdir="tmp",
            threads=1
        conda:
            "scvi-env"
        shell:
            r"""
            echo {params.nn} > {output}
            """


rule get_umap:
    input:
        "results/{tissue}/objects/adata_PCAd_batched.h5ad",
        "results/{tissue}/tables/knee.txt",
        "results/{tissue}/tables/optimum_nn.txt"
    output:
        "results/{tissue}/objects/adata_PCAd_batched_umap.h5ad"
    params:
        use_matrix=config["batch_correction"],
        col_by=config["col_by"]
    resources:
        mem=increment_memory(20000),
        queue='normal',
        mem_mb=increment_memory(20000),
        mem_mib=increment_memory(20000),
        disk_mb=increment_memory(20000),
        tmpdir="tmp",
        threads=32
    conda:
        "scvi-env"
    shell:
        r"""
        python bin/003-umap_embedding.py \
            --tissue {wildcards.tissue} \
            --fpath {input[0]} \
            --knee_file {input[1]} \
            --use_matrix {params.use_matrix} \
            --optimum_nn_file {input[2]} \
            --col_by {params.col_by}
        """

# Define clustering resolutions
clustering_resolutions = list(config["clustering_resolutions"])

rule cluster_array:
    input:
        "results/{tissue}/objects/adata_PCAd_batched_umap.h5ad"
    output:
        "results/{tissue}/tables/clustering_array/leiden_{clustering_resolution}/clusters.csv"
    params:
        pref_matrix=config["pref_matrix"]
    resources:
        mem=increment_memory(20000),
        queue='long',
        mem_mb=increment_memory(20000),
        mem_mib=increment_memory(20000),
        disk_mb=increment_memory(20000),
        tmpdir="tmp",
        threads=16
    conda:
        "scvi-env"
    shell:
        r"""
        mkdir -p results/{wildcards.tissue}/tables/clustering_array
        mkdir -p results/{wildcards.tissue}/tables/clustering_array/leiden_{wildcards.clustering_resolution}
        python bin/004-scanpy_cluster.py \
            --tissue {wildcards.tissue} \
            --fpath {input[0]} \
            --pref_matrix {params.pref_matrix} \
            --clustering_resolution {wildcards.clustering_resolution}
        """

if config["optimise_run_params"]:
    rule run_params_optimisation:
        input:
            "results/{tissue}/tables/clustering_array/leiden_3.0/clusters.csv",
            "results/{tissue}/tables/log1p_cp10k_sparse.npz",
            "results/{tissue}/tables/genes.txt",
            "results/{tissue}/tables/cells.txt"
        output:
            "results/{tissue}/tables/keras-grid_search/keras-use_params.txt" 
        resources:
            mem=increment_memory(20000),
            queue='long',
            mem_mb=increment_memory(20000),
            mem_mib=increment_memory(20000),
            disk_mb=increment_memory(20000),
            tmpdir="tmp",
            threads=1
        singularity:
            "/software/hgi/containers/yascp/yascp.cog.sanger.ac.uk-public-singularity_images-wtsihgi_nf_scrna_qc_6bb6af5-2021-12-23-3270149cf265.sif"
        shell:
            r"""
            mkdir -p results/{wildcards.tissue}/tables/keras-grid_search

            python bin/005a-scanpy_cluster_optimise_model-keras.py \
                --tissue {wildcards.tissue} \
                --sparse_matrix_path {input[1]} \
                --clusters_df {input[0]} \
                --genes_f {input[2]} \
                --cells_f {input[3]} \
                --number_epoch 25 \
                --batch_size 32 \
                --train_size_fraction 0.67 \
                --output_file results/{wildcards.tissue}/tables/keras-grid_search/keras-
            """
else:
    rule make_dummy_keras_params:
        output:
            "results/{tissue}/tables/keras-grid_search/keras-use_params.txt"
        resources:
            mem=5000,
            queue='normal',
            mem_mb=5000,
            mem_mib=5000,
            disk_mb=5000,
            tmpdir="tmp",
            threads=1
        conda:
            "scvi-env"
        params:
            activation=config["activation"],
            loss=config["loss"],
            optimizer=config["optimizer"],
            sparsity_l1__activity=config["sparsity_l1__activity"],
            sparsity_l1__bias=config["sparsity_l1__bias"],
            sparsity_l1__kernel=config["sparsity_l1__kernel"],
            sparsity_l2__activity=config["sparsity_l2__activity"],
            sparsity_l2__bias=config["sparsity_l2__bias"],
            sparsity_l2__kernel=config["sparsity_l2__kernel"]
        shell:
            r"""
            mkdir -p results/{wildcards.tissue}/tables/keras-grid_search

            echo -e "param__activation\t{params.activation}\nparam__loss\t{params.loss}\nparam__optimizer\t{params.optimizer}\nparam__sparsity_l1__activity\t{params.sparsity_l1__activity}\nparam__sparsity_l1__bias\t{params.sparsity_l1__bias}\nparam__sparsity_l1__kernel\t{params.sparsity_l1__kernel}\nparam__sparsity_l2__activity\t{params.sparsity_l2__activity}\nparam__sparsity_l2__bias\t{params.sparsity_l2__bias}\nparam__sparsity_l2__kernel\t{params.sparsity_l2__kernel}" > {output}
            """


rule test_clusters:
    input:
        "results/{tissue}/tables/keras-grid_search/keras-use_params.txt",
        "results/{tissue}/tables/log1p_cp10k_sparse.npz",
        "results/{tissue}/tables/genes.txt",
        "results/{tissue}/tables/cells.txt",
        "results/{tissue}/tables/clustering_array/leiden_{clustering_resolution}/clusters.csv"
    output:
        "results/{tissue}/tables/clustering_array/leiden_{clustering_resolution}/base-model_report.tsv.gz" 
    resources:
        mem=increment_memory(20000),
        queue='long',
        mem_mb=increment_memory(20000),
        mem_mib=increment_memory(20000),
        disk_mb=increment_memory(20000),
        tmpdir="tmp",
        threads=1
    singularity:
        "/software/hgi/containers/yascp/yascp.cog.sanger.ac.uk-public-singularity_images-wtsihgi_nf_scrna_qc_6bb6af5-2021-12-23-3270149cf265.sif"
    shell:
        r"""
        python bin/005-scanpy_cluster_validate_resolution-keras.py \
            --tissue {wildcards.tissue} \
            --sparse_matrix_path {input[1]} \
            --clusters_df {input[4]} \
            --genes_f {input[2]} \
            --cells_f {input[3]} \
            --keras_param_file {input[0]} \
            --number_epoch 25 \
            --batch_size 32 \
            --train_size_fraction 0.67 \
            --output_file results/{wildcards.tissue}/tables/clustering_array/leiden_{wildcards.clustering_resolution}/base
        """


## Define function to aggregate the output of the clustering array results within tissue
def gather_within_tissue(wildcards):
    return expand("results/{tissue}/tables/clustering_array/leiden_{clustering_resolution}/base-model_report.tsv.gz",
                  tissue=wildcards.tissue,
                  clustering_resolution=config["clustering_resolutions"])


# Run the aggregation of the keras tests
rule summarise_cluster_test:
    input:
        "results/{tissue}/objects/adata_PCAd_batched_umap.h5ad",
        gather_within_tissue
    output:
        "results/{tissue}/objects/adata_PCAd_batched_umap_clustered.h5ad",
        "results/{tissue}/tables/optim_resolution.txt",
        "results/{tissue}/tables/markers/markers_all_optim_clusters.txt.gz"
    params:
        MCC_thresh=config["MCC_thresh"],
        pref_matrix=config["pref_matrix"]
    resources:
        mem=20000,
        queue='normal',
        mem_mb=20000,
        mem_mib=20000,
        disk_mb=20000,
        tmpdir="tmp",
        threads=1
    conda:
        "scvi-env"
    shell:
        r"""
        mkdir -p results/{wildcards.tissue}/figures/clustering_array_summary
        mkdir -p results/{wildcards.tissue}/tables/markers
        mkdir -p results/{wildcards.tissue}/figures/markers
        python bin/006-summarise_keras.py \
            --tissue {wildcards.tissue} \
            --h5_path {input[0]} \
            --outpath results/{wildcards.tissue}/figures/clustering_array_summary/keras_accuracy \
            --MCC_thresh {params.MCC_thresh} \
            --pref_matrix {params.pref_matrix}
        """

if config["add_celltypist"]:
    rule add_celltypist:
        input:
            "results/{tissue}/objects/adata_PCAd_batched_umap_clustered.h5ad"
        output:
            "results/{tissue}/tables/annotation/CellTypist/CellTypist_prob_matrix.csv",
            "results/{tissue}/tables/annotation/CellTypist/CellTypist_decision_matrix.csv",
            "results/{tissue}/tables/annotation/CellTypist/CellTypist_anno_conf.csv"
        params:
            model=config["celltypist_model"],
            model_name=config["celltypist_model_name"],
            pref_matrix=config["pref_matrix"]
        resources:
            mem=20000,
            queue='normal',
            mem_mb=20000,
            mem_mib=20000,
            disk_mb=20000,
            tmpdir="tmp",
            threads=1
        conda:
            "scvi-env"
        shell:
            r"""
            mkdir -p results/{wildcards.tissue}/figures/annotation
            mkdir -p results/{wildcards.tissue}/tables/annotation
            mkdir -p results/{wildcards.tissue}/tables/annotation/CellTypist
            python bin/007-CellTypist.py \
                --tissue {wildcards.tissue} \
                --h5_path {input[0]} \
                --pref_matrix {params.pref_matrix} \
                --model {params.model} \
                --model_name {params.model_name}
            """

rule predict_all_cells:
    input:
        "results/{tissue}/tables/raw_counts_sparse.npz",
        "results/{tissue}/tables/raw_genes.txt",
        "results/{tissue}/tables/raw_cells.txt",
        "results/{tissue}/tables/raw_gene.var.txt",
        "results/{tissue}/tables/optim_resolution.txt"
    output:
        "results/{tissue}/tables/annotation/keras/optimum_res_all_cells_all_probabilities.txt"
    singularity:
        "/software/hgi/containers/yascp/yascp.cog.sanger.ac.uk-public-singularity_images-wtsihgi_nf_scrna_qc_6bb6af5-2021-12-23-3270149cf265.sif"
    resources:
        mem=20000,
        queue='long',
        mem_mb=20000,
        mem_mib=20000,
        disk_mb=20000,
        tmpdir="tmp",
        threads=1
    shell:
        r"""
        python bin/008-predict_all_probabilities_keras.py \
            --tissue {wildcards.tissue} \
            --sparse_matrix_path {input[0]} \
            --genes_f {input[1]} \
            --cells_f {input[2]} \
            --genes_var_f {input[3]} \
            --optim_resolution_f {input[4]} \
            --output_file "results/{wildcards.tissue}/tables/annotation/keras/optimum_res_all_cells_"
        """

rule add_predictions_filter:
    input:
        "/lustre/scratch126/humgen/projects/sc-eqtl-ibd/analysis/bradley_analysis/scripts/scRNAseq/Atlassing/tissues_combined/input_test/adata_raw_input_{tissue}.h5ad",
        "results/{tissue}/tables/annotation/keras/optimum_res_all_cells_all_probabilities.txt"
    output:
        "results/{tissue}/objects/adata_raw_predicted_celltypes_filtered.h5ad"
    conda:
        "scvi-env"
    params:
        probability_threshold=config["probability_threshold"]
    resources:
        mem=20000,
        queue='normal',
        mem_mb=20000,
        mem_mib=20000,
        disk_mb=20000,
        tmpdir="tmp",
        threads=1
    shell:
        r"""
        python bin/009-add_all_predictions_adata_filter.py \
            --tissue {wildcards.tissue} \
            --fpath {input[0]} \
            --prediction_file {input[1]} \
            --probability_threshold {params.probability_threshold}
        """